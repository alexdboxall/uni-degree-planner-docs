{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Uni Degree Planner","text":"<p>Welcome to the internal documentation for the Uni Degree Planner project.</p> <p>This tool allows students to plan out their degree using a drag-and-drop interface, while ensuring prerequisite and program requirements are correctly validated.</p> <p>The tool is designed to be easily configurable for any university or school. It is currently implemented as an unofficial planner for the Australian National University (ANU). This tool is not affiliated with the ANU.</p> <p>You can try the unofficial ANU planner here: Unofficial ANU Degree Planner</p> <p></p>"},{"location":"#sections","title":"Sections","text":"<ul> <li>Prerequisite Expression Language: Expression language for course and degree prerequisite requirements</li> <li>Degree Configuration Files: JSON configuration files for specifying degree settings and left sidebar groups</li> </ul>"},{"location":"degreeconfig/","title":"Degree Configuration Files","text":"<p>Degree Configuration Files are used to specify information about degrees, such as the default number of years, the default search filters, the valid starting years and semesters, the total unit amounts, and which courses appear in the left sidebar and how they are grouped.</p> <p>These configuration files are in JSON format.</p>"},{"location":"degreeconfig/#toplevel-configuration","title":"Toplevel Configuration","text":"<p>The following fields define a degree's top-level structure and layout. These appear at the root of the degree configuration JSON file.</p>"},{"location":"degreeconfig/#required-fields","title":"Required Fields","text":"Field Type Description <code>name</code> <code>string</code> A human-readable name for the degree. This is usually the same as the long name, except without the '(Honours) part (e.g. <code>\"Bachelor of Advanced Computing\"</code>). <code>longName</code> <code>string</code> A human-readable, full name of the degree (e.g. <code>\"Bachelor of Advanced Computing (Honours)\"</code>). <code>degreeCode</code> <code>string</code> The degree's internal code (e.g. <code>\"aacom\"</code>). This must match other components that refer to degree code (e.g. the <code>XDEGREE</code> prerequisite expression). Case sensitive. <code>defaultUnitsPerCourse</code> <code>integer</code> The number of units a course is assumed to be worth if not otherwise specified (typically <code>6</code>). <code>defaultTermLayout</code> <code>integer</code> The index into <code>termLayouts</code> that represents the default term arrangement (e.g. <code>0</code> for the first layout). This should generally always be 0. <code>termLayouts</code> <code>array of arrays</code> A list of possible term structures. Each sub-array represents one year of study, where each inner array defines term codes in order. Example:<code>[[ \"Semester 1\", \"Semester 2\" ]]</code> represents a 2-semester-per-year layout. There should generally only be one sublist in the main list. This structure is more flexible than required, hence why it is a nested list instead of a regular one. <code>defaultYearsInDegree</code> <code>integer</code> The default number of years the degree spans (e.g. <code>3</code>, <code>4</code>, or <code>5</code>). Min is 1 and max is 10, both inclusive. <code>maxDegreeUnits</code> <code>integer</code> The maximum number of units allowed in the degree (e.g. 192 for a 4 year degree). <code>coursesPerTerm</code> <code>integer</code> The typical number of courses per term a student might take. This should be set to one higher than the usual per-term limit to allow for some overloads or flexibility in moving courses. (e.g. at ANU, this is set to 5, as normally the limit is 4 courses. if one wants to overload to the up to 6 courses, users can change this in the settings). <code>displayYearStart</code> <code>integer</code> Should generally be set to 1. Sets the starting point for \"Year 1\", \"Year 2\", etc. in the planner. If this tool is used for, e.g. highschools, could be set to e.g. 11 to make the first logical year be \"Year 11\" instead of \"Year 1\""},{"location":"degreeconfig/#optional-fields","title":"Optional Fields","text":"Field Type Description <code>minStartingYear</code> <code>integer</code> The minimum valid year the degree can start in - used to ensure users cannot set the degree rules to be a year where old rules aren't encoded. If not set, 2019 is the earliest year. <code>validStartSemesters</code> <code>array of strings</code> The semesters in which students are allowed to start the degree. Example: <code>[ \"Semester 1\", \"Semester 2\" ]</code> or <code>[ \"Semester 1\" ]</code> if only semester 1 is supported. If not set, all semesters are supported to start a degree."},{"location":"degreeconfig/#dropdown-configuration","title":"Dropdown Configuration","text":"<p>This part of the configuration is the most involved and sets which courses appear in the left sidebar, and how they are grouped and labelled. Sections can be given headers, a description, an add-all button, and can changed based on the year (as degree rules can change). Additionally, there are some special descriptions, described in the table.</p>"},{"location":"degreeconfig/#fields","title":"Fields","text":"Field Type Required/Optional Description <code>header</code> <code>string</code> Optional If present, sets the header for this section and the below sections. <code>name</code> <code>string</code> Required The label on the drowndown group. Only in the case that <code>courses</code> is set to the string <code>*RECOMMENDED*</code> may this be omitted. <code>courses</code> <code>array of strings, or a string</code> Required, unless <code>subst</code> is present. The array of courses to show in this section. Wildcards (e.g. ['COMP1_']) are accepted, though should be used carefully to not have an overwhelming number of entries. This value may be a string literal, instead of an array, only if that string literal is <code>*RECOMMENDED*</code>, which causes the cause list to be generated automatically based on a recommender algorithm. <code>showAddAll</code> <code>boolean</code> Optional If true, an \"Add all\" button will appear under the guide string/top of the dropdown, and if clicked, all courses in the group will be added all at once. If not present, it acts like false <code>guideString</code> <code>string</code> Optional If present, this text will appear at the top of the dropdown. It is recommended to include one. If not present, no guide will be given, unless <code>subst</code> is present. <code>years</code> <code>array of integers</code> Optional If present, this drowndown will only appear if the current year is in the list of years. Multiple similar dropdowns can be present with different year values to make it appear like the courses are changing based on the year. If not present, this dropdown will always appear. <code>optional</code> <code>string</code> Optional No effect currently - may have some impact on <code>SELECT</code> statements. <code>subst</code> <code>string</code> Optional If present, instead of getting the courses from the specified list, the courses present in a given <code>SUBST</code> will be included. If no guide string is given, the prerequisite expression of the <code>SUBST</code> will be used as the guide string."},{"location":"degreeconfig/#examples","title":"Examples","text":"<pre><code>...\n\n{\n    \"header\": \"Specialisations\",\n    \"name\": \"Artificial Intelligence\",\n    \"courses\": [\"COMP2620\", \"COMP3620\", \"COMP4620\", \"COMP4691\"],\n    \"showAddAll\": true,\n    \"optional\": \"spec\",\n    \"guideString\": \"Please select all 4 courses.\",\n    \"years\": [2018, 2019, 2020, 2021, 2022, 2023, 2024]\n},\n{\n    \"header\": \"Specialisations\",\n    \"name\": \"Artificial Intelligence\",\n    \"courses\": [\"COMP2620\", \"COMP3620\", \"COMP4620\", \"COMP4691\"],\n    \"showAddAll\": true,\n    \"optional\": \"spec\",\n    \"guideString\": \"Please select all 4 courses.\",\n    \"years\": [2025, 2026]\n},\n{\n    \"name\": \"Machine Learning\",\n    \"courses\": [\"COMP3670\", \"COMP4650\", \"COMP4660\", \"COMP4670\", \"COMP4680\", \"ENGN4528\"],\n    \"showAddAll\": false,\n    \"optional\": \"spec\",\n    \"guideString\": \"Please select 4 of the below courses.\"\n},\n{\n    \"name\": \"Professional Computing\",\n    \"subst\": \"cs/PCOM-SPEC\"\n}\n\n...\n</code></pre>"},{"location":"degreeconfig/#search-configuration","title":"Search Configuration","text":"<p>The <code>search</code> configuration defines togglable filters for course visibility within the degree planner's course search interface.</p> <p>A number of keys are defined, and a UI label is defined for each. The uni-specific front-end part of the planner is able to take these keys, and show or hide courses based on them. Not all of these keys have to be used by a particular degree, e.g. there may be 20 different toggles/filters set by the university, but a given degree might show only 10 of them, and then only set 4 of them by default.</p> <p>Generally, most degrees will give the same layout, with the selected filters by default changing based on the degree type (e.g. undergraduate vs postgraduate).</p>"},{"location":"degreeconfig/#fields_1","title":"Fields","text":"Field Type Description <code>layout</code> <code>array of objects</code> A list of groups of toggle filters. Each group is an object where each key is a unique identifier for the toggle (e.g. <code>sem1</code>, <code>postgrad</code>), and each value is the label shown in the UI. <code>selectedByDefault</code> <code>array of strings</code> A list of toggle identifiers that are selected (enabled) by default. These must correspond to keys found in the <code>layout</code>."},{"location":"degreeconfig/#example","title":"Example","text":"<pre><code>\"search\": {\n  \"layout\": [\n    {\n      \"undergrad\": \"Show undergraduate courses?\",\n      \"postgrad\": \"Show postgraduate courses?\",\n      \"weirdo\": \"Show 5000, 7000 and 9000 level courses?\"\n    },\n    {\n      \"sem1\": \"Show semester 1 courses?\",\n      \"sem2\": \"Show semester 2 courses?\",\n      \"seasonal\": \"Show seasonal courses?\"\n    }\n  ],\n  \"selectedByDefault\": [\n    \"postgrad\", \"sem1\", \"sem2\"\n  ]\n}\n</code></pre>"},{"location":"degreeconfig/#example-configuration-file-1","title":"Example Configuration File 1","text":"<pre><code>{\n    \"degreeCode\": \"aacom\",\n    \"name\": \"Bachelor of Advanced Computing\",\n    \"longName\": \"Bachelor of Advanced Computing (Honours)\",\n    \"defaultUnitsPerCourse\": 6,\n    \"defaultYearsInDegree\": 4,\n    \"coursesPerTerm\": 5,\n    \"defaultTermLayout\": 0,\n    \"termLayouts\": [\n        [\"Semester 1\", \"Semester 2\"]\n    ],\n    \"maxDegreeUnits\": 192,\n    \"displayYearStart\": 1,\n    \"search\": {\n        \"layout\": [\n            {\n                \"undergrad\": \"Show undergraduate courses?\",\n                \"postgrad\": \"Show postgraduate courses?\",\n                \"weirdo\": \"Show 5000, 7000 and 9000 level courses?\"\n            },\n            {\n                \"sem1\": \"Show semester 1 courses?\",\n                \"sem2\": \"Show semester 2 courses?\",\n                \"seasonal\": \"Show seasonal courses?\"\n            }\n        ],\n        \"selectedByDefault\": [\n            \"undergrad\", \"sem1\", \"sem2\"\n        ]\n    },\n    \"dropdown\": [\n        {\n            \"header\": \"Core Requirements\",\n            \"name\": \"Introductory Programming\",\n            \"courses\": [\"COMP1100\", \"COMP1130\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\"\n        },\n        {\n            \"name\": \"Structured Programming\",\n            \"courses\": [\"COMP1110\", \"COMP1140\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\"\n        },\n        {\n            \"name\": \"Mathematics\",\n            \"courses\": [\"MATH1005\", \"MATH2222\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\",\n            \"years\": [2022, 2023, 2024, 2025, 2026]\n        },\n        {\n            \"name\": \"Transdisciplinary Problem Solving\",\n            \"courses\": [\"TRANSDISCIPLINARY\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Select two courses not already part of your degree, from the following\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Compulsory courses\",\n            \"courses\": [\"COMP1600\", \"COMP2100\", \"COMP2300\", \"COMP2310\", \"COMP2400\", \"COMP3600\", \"COMP4450\"],\n            \"showAddAll\": true,\n            \"guideString\": \"You must take all of these courses\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Compulsory courses\",\n            \"courses\": [\"COMP1600\", \"COMP2100\", \"COMP2120\", \"COMP2300\", \"COMP2310\", \"COMP2420\",\n                \"COMP3600\", \"COMP4450\"],\n            \"showAddAll\": true,\n            \"guideString\": \"You must take all of these courses\",\n            \"years\": [2022, 2023, 2024]\n        },\n        {\n            \"name\": \"Compulsory courses\",\n            \"courses\": [\"COMP1600\", \"COMP2100\", \"COMP2120\", \"COMP2300\", \"COMP2310\", \"COMP2420\", \"MATH1005\",\n                \"COMP3600\", \"COMP4450\"],\n            \"showAddAll\": true,\n            \"guideString\": \"You must take all of these courses\",\n            \"years\": [2019, 2020, 2021]\n        },\n        {\n            \"name\": \"Honours\",\n            \"courses\": [\"COMP4550\", \"COMP4500\", \"COMP4820\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\",\n            \"years\": [2024, 2025, 2026]\n        },\n        {\n            \"name\": \"Honours\",\n            \"courses\": [\"COMP4550\", \"COMP4810\", \"COMP4820\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\",\n            \"years\": [2023]\n        },\n        {\n            \"name\": \"Honours\",\n            \"courses\": [\"COMP4550\", \"COMP4560\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Choose one of the below courses\",\n            \"years\": [2019, 2020, 2021, 2022]\n        },\n        {\n            \"name\": \"Elective courses\",\n            \"courses\": [\"MATH1013\", \"MATH1014\", \"MATH1115\", \"MATH1116\", \"MATH2301\", \"ENGN1211\", \"STAT1003\", \"STAT1008\"],\n            \"showAddAll\": false,\n            \"guideString\": \"These courses may count towards your degree in place of a COMP elective.\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Elective courses\",\n            \"courses\": [\"MATH1013\", \"MATH1014\", \"MATH1115\", \"MATH1116\", \"MATH2301\", \"ENGN1211\", \"STAT1003\", \"STAT1008\", \"VCUG3001\", \"ENGN3230\"],\n            \"showAddAll\": false,\n            \"guideString\": \"These courses may count towards your degree in place of a COMP elective.\"\n        },\n        {\n            \"header\": \"Specialisations\",\n            \"name\": \"Artificial Intelligence\",\n            \"courses\": [\"COMP2620\", \"COMP3620\", \"COMP4620\", \"COMP4691\"],\n            \"showAddAll\": true,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select all 4 courses.\",\n            \"years\": [2018, 2019, 2020, 2021, 2022, 2023, 2024]\n        },\n        {\n            \"header\": \"Specialisations\",\n            \"name\": \"Artificial Intelligence\",\n            \"courses\": [\"COMP2620\", \"COMP3620\", \"COMP4620\", \"COMP4691\"],\n            \"showAddAll\": true,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select all 4 courses.\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Machine Learning\",\n            \"courses\": [\"COMP3670\", \"COMP4650\", \"COMP4660\", \"COMP4670\", \"COMP4680\", \"ENGN4528\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select 4 of the below courses.\"\n        },\n        {\n            \"name\": \"Human-Centred and Creative Computing\",\n            \"courses\": [\"COMP3900\", \"COMP4350\", \"COMP4528\", \"COMP4610\", \"COMP3540\", \"COMP3670\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select COMP3900, one of COMP3540 or COMP3670, and 2 others.\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Human-Centred and Creative Computing\",\n            \"courses\": [\"COMP3900\", \"COMP3540\", \"COMP4350\", \"COMP4610\", \"COMP4660\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select COMP3900 and 3 others.\",\n            \"years\": [2023, 2024]\n        },\n        {\n            \"name\": \"Systems and Architecture\",\n            \"courses\": [\"COMP2400\", \"COMP3300\", \"COMP3310\", \"COMP3320\", \"COMP3610\", \"COMP4300\", \"COMP4330\", \"COMP4340\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please select two 4000 level courses, and 2 others.\",\n            \"years\": [2018, 2019, 2020, 2021, 2022, 2023]\n        },\n        {\n            \"name\": \"Systems and Architecture\",\n            \"courses\": [\"COMP4045\", \"COMP4300\", \"COMP4712\", \"COMP2400\", \"COMP3300\", \"COMP3310\", \"COMP3320\",\"COMP3610\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please elect two of COMP4045, COMP4300 and COMP4712; and then any two more.\",\n            \"years\": [2024]\n        },\n        {\n            \"name\": \"Systems and Architecture\",\n            \"courses\": [\"COMP4045\", \"COMP4300\", \"COMP4712\", \"COMP3300\", \"COMP3310\", \"COMP3320\",\"COMP3610\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please elect two of COMP4045, COMP4300 and COMP4712; and then any two more.\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"name\": \"Theoretical Computer Science\",\n            \"courses\": [\"COMP2610\", \"COMP2620\", \"COMP3610\", \"COMP3630\", \"MATH3343\", \"COMP4600\", \"COMP4630\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please take COMP4600 and COMP4630, and then 2 others.\",\n            \"years\": [2018, 2019, 2020, 2021, 2022, 2023]\n        },\n        {\n            \"name\": \"Theoretical Computer Science\",\n            \"courses\": [\"COMP2620\", \"COMP3610\", \"COMP3630\", \"COMP4712\", \"COMP4600\", \"COMP4630\", \"COMP4011\", \"MATH4343\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please take two of COMP2620, COMP3610, COMP3630 and COMP4712; and then any two more.\",\n            \"years\": [2024]\n        },\n        {\n            \"name\": \"Theoretical Computer Science\",\n            \"courses\": [\"COMP4011\", \"COMP4600\", \"MATH4343\", \"COMP2620\", \"COMP3610\", \"COMP3630\", \"COMP4712\", \"COMP4011\", \"COMP4600\", \"MATH4343\"],\n            \"showAddAll\": false,\n            \"optional\": \"spec\",\n            \"guideString\": \"Please take two of COMP4011, COMP4600 and MATH4343; then any two more.\",\n            \"years\": [2025, 2026]\n        },\n        {\n            \"header\": \"Suggested courses\",\n            \"guideString\": null,\n            \"showAddAll\": false,\n            \"courses\": \"*RECOMMENDED*\"\n        },\n        {\n            \"header\": \"Other COMP Courses\",\n            \"name\": \"COMP Level 1\",\n            \"courses\": [\"COMP1_\"],\n            \"showAddAll\": false,\n            \"guideString\": null\n        },\n        {\n            \"name\": \"COMP Level 2\",\n            \"courses\": [\"COMP2_\"],\n            \"showAddAll\": false,\n            \"guideString\": null\n        },\n        {\n            \"name\": \"COMP Level 3\",\n            \"courses\": [\"COMP3_\"],\n            \"showAddAll\": false,\n            \"guideString\": null\n        },\n        {\n            \"name\": \"COMP Level 4\",\n            \"courses\": [\"COMP4_\"],\n            \"showAddAll\": false,\n            \"guideString\": null\n        }\n    ]\n}\n</code></pre>"},{"location":"degreeconfig/#example-configuration-file-2","title":"Example Configuration File 2","text":"<pre><code>{\n    \"degreeCode\": \"7706xmcomp\",\n    \"name\": \"Master of Computing\",\n    \"longName\": \"Master of Computing\",\n    \"defaultUnitsPerCourse\": 6,\n    \"defaultYearsInDegree\": 2,\n    \"coursesPerTerm\": 5,\n    \"defaultTermLayout\": 0,\n    \"termLayouts\": [\n        [\"Semester 1\", \"Semester 2\"]\n    ],\n    \"maxDegreeUnits\": 96,\n    \"displayYearStart\": 1,\n    \"validStartSemesters\": [\n        \"Semester 1\"\n    ],\n    \"minStartingYear\": 2025,\n    \"search\": {\n        \"layout\": [\n            {\n                \"undergrad\": \"Show undergraduate courses?\",\n                \"postgrad\": \"Show postgraduate courses?\",\n                \"weirdo\": \"Show 5000, 7000 and 9000 level courses?\"\n            },\n            {\n                \"sem1\": \"Show semester 1 courses?\",\n                \"sem2\": \"Show semester 2 courses?\",\n                \"seasonal\": \"Show seasonal courses?\"\n            }\n        ],\n        \"selectedByDefault\": [\n            \"postgrad\", \"sem1\", \"sem2\"\n        ]\n    },\n    \"dropdown\": [\n        {\n            \"header\": \"Core Requirements\",\n            \"name\": \"Compulsory courses\",\n            \"courses\": [\"COMP6250\", \"COMP6442\", \"COMP6710\", \"COMP8260\"],\n            \"showAddAll\": true,\n            \"guideString\": \"You must take all of these courses\"\n        },\n        {\n            \"name\": \"Foundational courses\",\n            \"courses\": [\"MATH6005\", \"COMP6260\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Please select one of the following\"\n        },\n        {\n            \"name\": \"Project courses\",\n            \"courses\": [\"COMP8715\", \"COMP8830\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Please select one of the following\"\n        },\n        {\n            \"name\": \"Computing electives\",\n            \"courses\": [\"COMP6_\", \"COMP7_\", \"COMP8_\"],\n            \"showAddAll\": false,\n            \"guideString\": \"Please select three of the following\"\n        },\n        {\n            \"header\": \"Specialisations\",\n            \"name\": \"Artificial Intelligence\",\n            \"subst\": \"cs/ARTIF-SPEC\",\n            \"showAddAll\": true\n        },\n        {\n            \"name\": \"Computer Systems\",\n            \"subst\": \"cs/CMSY-SPEC\"\n        },\n        {\n            \"name\": \"Computational Foundations\",\n            \"subst\": \"cs/COMP-SPEC\"\n        },\n        {\n            \"name\": \"Data Science\",\n            \"subst\": \"cs/DTSC-SPEC\"\n        },\n        {\n            \"name\": \"Human-Centred and Creative Computing\",\n            \"subst\": \"cs/HCCM-SPEC\"\n        },\n        {\n            \"name\": \"Machine Learning\",\n            \"subst\": \"cs/MCHL-SPEC\"\n        },\n        {\n            \"name\": \"Professional Computing\",\n            \"subst\": \"cs/PCOM-SPEC\"\n        }\n    ]\n}\n</code></pre>"},{"location":"degreeconfig/#full-format-specification","title":"Full Format Specification","text":"<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"DegreeJSONEncoding\",\n  \"type\": \"object\",\n  \"required\": [\n    \"name\",\n    \"longName\",\n    \"degreeCode\",\n    \"defaultUnitsPerCourse\",\n    \"defaultTermLayout\",\n    \"termLayouts\",\n    \"defaultYearsInDegree\",\n    \"coursesPerTerm\",\n    \"maxDegreeUnits\",\n    \"displayYearStart\"\n  ],\n  \"properties\": {\n    \"name\": { \"type\": \"string\" },\n    \"longName\": { \"type\": \"string\" },\n    \"degreeCode\": { \"type\": \"string\" },\n    \"defaultUnitsPerCourse\": { \"type\": \"integer\" },\n    \"defaultTermLayout\": { \"type\": \"integer\" },\n    \"termLayouts\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      }\n    },\n    \"defaultYearsInDegree\": { \"type\": \"integer\" },\n    \"coursesPerTerm\": { \"type\": \"integer\" },\n    \"maxDegreeUnits\": { \"type\": \"integer\" },\n    \"displayYearStart\": { \"type\": \"integer\" },\n    \"minStartingYear\": { \"type\": \"integer\" },\n    \"validStartSemesters\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    },\n    \"search\": {\n      \"type\": \"object\",\n      \"required\": [\"layout\", \"selectedByDefault\"],\n      \"properties\": {\n        \"layout\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": { \"type\": \"string\" }\n          }\n        },\n        \"selectedByDefault\": {\n          \"type\": \"array\",\n          \"items\": { \"type\": \"string\" }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"dropdown\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"header\": { \"type\": \"string\" },\n          \"name\": { \"type\": \"string\" },\n          \"courses\": {\n            \"oneOf\": [\n              { \"type\": \"string\" },\n              {\n                \"type\": \"array\",\n                \"items\": { \"type\": \"string\" }\n              }\n            ]\n          },\n          \"showAddAll\": { \"type\": \"boolean\" },\n          \"guideString\": { \"type\": [\"string\", \"null\"] },\n          \"years\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"integer\" }\n          },\n          \"optional\": { \"type\": \"string\" },\n          \"subst\": { \"type\": \"string\" }\n        },\n        \"additionalProperties\": false\n      }\n    }\n  },\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"directorystructure/","title":"Directory Structure","text":"<p>...</p>"},{"location":"syntax/","title":"Prerequisite Expression Language","text":"<p>The Prerequisite Expression Language is used to logically encode the requirements for taking a course, or for completing a degree, major, specialisation, etc.</p> <p>This document provides a comprehensive guide to the language syntax, structure, and evaluation model.</p>"},{"location":"syntax/#overview","title":"\ud83d\udcda Overview","text":"<ul> <li> <p>Basic Constructs   Learn how to write simple requirements using course codes, unit counts, and wildcards.</p> </li> <li> <p>General Notes on Evaluation   Understand how the evaluator matches courses against expressions and why ordering matters.</p> </li> <li> <p>Advanced Constructs   Explore filters, non-consuming checks (<code>WEAK</code>), multi-clause expressions (<code>UNITS</code>), and more.</p> </li> <li> <p>Examples   See real-world input \u2192 output conversions to understand the language in practice.</p> </li> <li> <p>EBNF Grammar   View the full (approximate) formal grammar of the language for reference or tooling support.</p> </li> </ul>"},{"location":"syntax/#basic-constructs","title":"Basic Constructs","text":"<ul> <li><code>COMP1100</code>                                             \u2014 the default number of units of a certain course must be taken prior to now</li> <li><code>~COMP1100</code>                                            \u2014 the default number of units of a certain course that are taken concurrently</li> <li><code>6 * &lt;COMP1100 | COMP1130&gt;</code>                            \u2014 units from a group of courses (any of them can count)</li> <li><code>12 * &lt;['MATH_']&gt;</code>                                     \u2014 units from a group of courses, using a wildcard (this one is 'any MATH course')</li> <li><code>12 * &lt;COMP1100 | ENGN4213 | ['MATH_'] | ['_3']&gt;</code>      \u2014 units from a group of courses, mixed (any combinations are fine)</li> <li><code>COMP1100 &amp; COMP1730</code>                                  - 'AND' expression (the left-hand-side and right-hand-side must be satisfied)</li> <li><code>COMP1100 | COMP1730</code>                                  - 'OR' expression (the left-hand-side or right-hand-side must be satisfied)</li> </ul> <p>These can be mixed and matched using brackets and such, too. e.g.:</p> <p><code>COMP1100 &amp; COMP1110 &amp; (MATH1005 | MATH2222) &amp; 24 * &lt;['COMP3_'] | ['COMP4_'] | ENGN4213&gt;</code></p> <p>This means: 'must take COMP1100 and COMP1110 and (either MATH1005 or MATH2222), and 24 units of (3000 or 4000-level COMP, or ENGN4213).</p> <p>For instance this might be satisfied by taking:</p> <ul> <li><code>COMP1100</code>, <code>COMP1110</code>, <code>MATH1005</code>, <code>COMP3500</code> (12 units), <code>ENGN4213</code>, <code>COMP4600</code></li> </ul> <p>Or, maybe like this!</p> <ul> <li><code>COMP1100</code>, <code>COMP1110</code>, <code>MATH2222</code>, <code>COMP3600</code>, <code>COMP4600</code>, <code>COMP4670</code>, <code>COMP3900</code></li> </ul>"},{"location":"syntax/#basic-wildcards","title":"Basic Wildcards","text":"<p>These must appear in square brackets and quotes inside a 'group' expression (the <code>X * &lt; ... &gt;</code> syntax above).</p> Wildcard Description <code>['_']</code> any course <code>['_3']</code> any course at a given level (e.g. 'any 3000-level course') <code>['MATH_']</code> any course of a certain subject (e.g. 'any MATH course') <code>['MATH3_']</code> any course at a given level, in a certain subject (e.g. 'any 3000-level MATH course')"},{"location":"syntax/#general-notes-on-evaluation","title":"General Notes on Evaluation","text":"<p>Before we get into the exact syntax, we need to look at how the planner evaluates expressions. Take the following:</p> <p><code>MATH1005 &amp; 6 * &lt;COMP1100 | ['MATH_']&gt;</code></p> <p>This expression means that someone must have completed MATH1005, and then either COMP1100, or any MATH course.</p> <p>Now we consider whether this expression would be satisfied if the user just took <code>MATH1005</code>. We find that it isn't, and this is because the evaluator does not double count courses to requirements. <code>MATH1005</code> could count toward its explicit mention in the expression, or against the <code>['MATH_']</code> wildcard, but it can't count for both.</p> <p>Now we consider someone who has taken both <code>COMP1100</code> and <code>MATH1005</code>. We can see this is clearly satisfied: the left-hand-side of the <code>&amp;</code> is satisfied by taking <code>MATH1005</code>, and the right-hand-side by taking <code>COMP1100</code>. </p> <p>But if we were to evaluate this 'wrongly', we can find ways for this to not be satisfied. For instance, let's evaluate the right-hand-side first. We'll match the <code>MATH1005</code> the user has taken against the <code>['MATH_']</code> wildcard (instead of <code>COMP1100</code> against its explicit requirement). Now when we get to the left-hand-side, we are stuck.</p>"},{"location":"syntax/#important-takeaway","title":"Important Takeaway","text":"<p>Courses a user have taken can only be matched against a single requirement, they do not double count.</p> <p>The evaluator will test all combinations of ways it can get the courses you have taken to match against the requirements, as it is sensitive to evaluation order and which courses match against which wildcards. If any combination can match, then the requirement is satisfied.</p>"},{"location":"syntax/#but-actually","title":"But Actually...","text":"<p>This is a slight simplification. Courses can have various unit amounts, and they can count as long as there are units left.</p> <p>e.g. if a course <code>COMP4500</code> if worth 12 units, and there is a requirement such as: <code>6 * &lt;['COMP_']&gt; &amp; 6 * &lt;['COMP4_']&gt;</code> (i.e. 6 units of any COMP course, then 6 units of any 4000-level COMP course), it will match, as the 12 units can be split across both requirements. It will also match the requirement <code>COMP4500 &amp; 6 * &lt;['COMP4_']&gt;</code>, as a raw course name (<code>COMP4500</code>) counts for the default number of units (6 in this case - see Degree Configuration Files for how to set this). If you have courses that have unit configurations different to the default, it is highly recommended to use the unit syntax (<code>12 * &lt;COMP4500&gt;</code>).</p>"},{"location":"syntax/#advanced-constructs","title":"Advanced Constructs","text":""},{"location":"syntax/#corequisiteconcurrent-expressions","title":"Corequisite/Concurrent Expressions","text":"<p>Regular course requirements check that a course has been taken prior to the the student taking the course in question. However, sometimes it is useful to check if a given course is being taken at the same time instead. This is called a corequisite.</p> <p>We can check for this with the tilde (<code>~</code>) syntax, e.g. <code>~COMP1130</code> checks if <code>COMP1130</code> is being taken at the same time as the course in question (and only the present time).</p> <p>If it may be taken as a prerequisite or corequisite, you need to specify both, i.e: <code>(COMP1130 | ~COMP1130)</code></p> <p>Entire wildcards may be marked as concurrent, e.g. <code>12 * &lt;['COMP4_'] | ~['COMP4_']&gt;</code> is valid. The tilde (<code>~</code>) may go outside or inside the square brackets. e.g. both <code>~['ENGN_']</code> and <code>[~'ENGN_']</code> are valid.</p> <p>The <code>~</code> must only be used with raw course codes or wildcards. It cannot go in front of an arbitrary expression.</p>"},{"location":"syntax/#negation-expressions","title":"Negation Expressions","text":"<p>Many courses are incompatible with other courses, for instance if there is an regular and advanced version of the same course, or a postgraduate and undergradaute version, and it is inpermissible to take both courses. This is not generally dealt with by the prerequsite expression. A seperate field in the course configuration specifies a list of incompatible courses.</p> <p>There are occasionally times where more complex incompatibility logic is required, where it is conditional. There are two forms of this:</p> <ul> <li>A negation expression can be used to check that a course has not been taken. e.g. <code>!COMP1130</code></li> <li>A negation expression can form part of a group, to exclude particular courses from a wildcard. e.g. <code>12 * &lt;['COMP4_'] | !COMP4500 | !COMP4820&gt;</code> requires you to take 12 units from any 4000-level COMP courses except for <code>COMP4500</code> and <code>COMP4820</code>.</li> </ul> <p>The positioning of the courses within the group does not matter (i.e. it does not matter if negations appear before or after wildcards that mention that course) - the courses marked with <code>!</code> will be removed after all courses have been collected in the group.</p> <p>The <code>!</code> must only go before a raw course code. It cannot go in front of an arbitrary expression, nor a wildcard.</p>"},{"location":"syntax/#complex-wildcards","title":"Complex Wildcards","text":"<p>Additional, more advanced wildcards exist:</p> Wildcard Description <code>['LAWS61_']</code> any course in a certain subject, with the given level and sublevel <code>['TRANSDISCIPLINARY']</code> (ANU specific) any course marked as having the transdisciplinary problem solving attribute"},{"location":"syntax/#permission-code-expressions","title":"Permission Code Expressions","text":"<p>Some courses require the permission of a convener before you can enrol. Others require placement tests, finding a research supervisor and topic approval, the finding of an internship, etc.</p> <p>In these cases the <code>PC</code> (permission code) expression can be used to mark that there is a further external requirement that cannot be expressed in the degree planner.</p> <p>For instance a course which says \"you must comple 96 units of courses, have a WAM of 75 or greater, completed ENGN3300 and ENGN3301, and be approved to enrol\" might look like this: <code>WEAK(96 &amp; &lt;1 ['_']&gt;) &amp; WAM &gt;= 75 &amp; ENGN3300 &amp; ENGN3301 &amp; PC</code>.</p>"},{"location":"syntax/#wam-expressions","title":"WAM Expressions","text":"<p>Some courses may require that a student's weighted average mark across their degree is above a certain value (e.g. in order to undertake an advanced course, an honours project, internship, etc).</p> <p>The syntax <code>WAM &gt;= 50</code> can be used (for any value). Only integral WAM values are supported, with values between 0 and 100 inclusive. </p> <p>The planner internally supports allocating a grade to each completed course, but this in no longer used. Requiring grade entry adds unnecessary complexity for students to use the planner, and they are instead just presented with a warning on the course sidebar that they must check their WAM meets the requirement before enrolling in the course.</p>"},{"location":"syntax/#gpa-expressions","title":"GPA Expressions","text":"<p>Similar to the WAM expression, a student's GPA (grade point average) can be tested against. e.g. <code>GPA &gt;= 5</code>.</p> <p>It may be useful to be able to specify decimals, e.g. to check if the GPA exceeeds 5.5. As the language tokeniser only supports integers, we instead specify this as follows: <code>GPA &gt;= 55</code>. Two digit GPA values are internally divided by 10 before the comparison is performed. This means GPAs must be in the range of 0.0 to 9.9, in increments of 0.1.</p>"},{"location":"syntax/#grade-expressions","title":"Grade Expressions","text":"<p>...</p>"},{"location":"syntax/#degree-expressions","title":"Degree Expressions","text":"<p>...</p>"},{"location":"syntax/#other-expressions","title":"Other Expressions","text":"<p>...</p>"},{"location":"syntax/#year-expressions","title":"Year Expressions","text":"<p>...</p>"},{"location":"syntax/#then-expressions","title":"Then Expressions","text":"<p>...</p>"},{"location":"syntax/#after-expressions","title":"After Expressions","text":"<p>...</p>"},{"location":"syntax/#constant-expressions","title":"Constant Expressions","text":"<p>...</p>"},{"location":"syntax/#weak-expressions","title":"Weak Expressions","text":"<p>...</p>"},{"location":"syntax/#fast-path-groups","title":"Fast-Path Groups","text":"<p>In the evaluation of group expressions (<code>X * &lt;...&gt;</code>), the evaluator will attempt all combinations to get courses to match wildcards. Is is to ensure the later parts of the expression can be tested against all combinations, to ensure we test all possibilities.</p> <p>However, in some cases, we do not need this, and want to just stop as soon as we find a single match. This can significantly speed up evaluation times.</p> <p>This is best done where there is either a wildcard on its own, or a wildcard which no other course can match within its enclosing scope (e.g. something in a <code>WEAK</code> block doesn't effect the outside of it).</p> <p>We call tell the evaluator to stop at the first match by using the following form:</p> <p><code>X * &lt;1 ...&gt;</code></p> <p>For instance:</p> <ul> <li><code>48 * &lt;1 ['_']&gt;</code><ul> <li>Matches any 48 units of courses</li> <li>This works because there are no further clauses in the expression that rely on the result.</li> </ul> </li> <li><code>COMP1100 &amp; 24 * &lt;1 ['ENGN_']&gt;</code><ul> <li>Matches COMP1100 and 24 units of ENGN courses</li> <li>This works because there is no overlap between COMP1100 and ENGN courses</li> </ul> </li> <li><code>30 * &lt;1 ['_2'] | ['_3']&gt; &amp; WEAK(96 * &lt;1 ['_']&gt;)</code><ul> <li>Matches \"96 units of any course, and independently, 30 units must come from 2000 or 3000 level courses\"</li> <li>This works because the 96 unit requirement is matched weak, and therefore anything outside it doesn't affect the inside and vice versa</li> </ul> </li> </ul> <p>All of these examples would still work without the <code>&lt;1</code> syntax, but would be significantly slower to evaluate.</p>"},{"location":"syntax/#filter-expressions","title":"Filter Expressions","text":"<p>...</p>"},{"location":"syntax/#unit-expressions","title":"Unit Expressions","text":"<p>...</p>"},{"location":"syntax/#subst-expressions","title":"Subst Expressions","text":"<p>...</p>"},{"location":"syntax/#select-expressions","title":"Select Expressions","text":"<p>...</p>"},{"location":"syntax/#examples","title":"Examples","text":"<p>Below is a list of real-world examples of course logic in English and their equivalent prerequisite expressions.</p>"},{"location":"syntax/#whitespace-and-precedence","title":"Whitespace and Precedence","text":"<p>Input (English):</p> <p>COMP3670  </p> <p>OR  </p> <p>COMP1110 OR COMP1140 AND MATH1014 OR MATH1115 OR MATH1116</p> <p>Expression:</p> <pre><code>COMP3670 | ((COMP1110 | COMP1140) &amp; (MATH1014 | MATH1115 | MATH1116))\n</code></pre>"},{"location":"syntax/#basic-unit-conversion","title":"Basic Unit Conversion","text":"<p>Input (English):</p> <p>You must have completed 72 units toward a degree including BIOL1004. Incompatible with BIOL1123.</p> <p>Expression:</p> <pre><code>66 * &lt;['_']&gt; &amp; BIOL1004\n</code></pre>"},{"location":"syntax/#weak-check-alternative","title":"Weak Check Alternative","text":"<p>Same as above, using a <code>WEAK</code> clause:</p> <p>Expression:</p> <pre><code>72 * &lt;['_']&gt; &amp; WEAK(BIOL1004)\n</code></pre>"},{"location":"syntax/#advanced-filter-use","title":"Advanced Filter Use","text":"<p>Input (English):</p> <p>Must complete 24 units of some list of courses, and 24 units from some other list of courses, but between the two, you must take 18 units of COMP3xxx unless you take COMP4600.</p> <p>Expression:</p> <pre><code>FILTER(18 * &lt;['COMP3_']&gt; | COMP4600) {\n    24 * &lt;...&gt; &amp; 24 * &lt;...&gt;\n}\n</code></pre>"},{"location":"syntax/#filter-weak-completion-check","title":"Filter + Weak Completion Check","text":"<p>Input (English):</p> <p>Must have completed 96 units toward a degree which must include: 30 units of courses at 2000/3000 level, Credit average in ENVS courses, and Distinction in proposed research project.</p> <p>Expression:</p> <pre><code>30 * &lt;1 ['_2'] | ['_3']&gt; &amp; PC &amp; WEAK(96 * &lt;1 ['_']&gt;)\n</code></pre>"},{"location":"syntax/#use-of-subst","title":"Use of <code>SUBST</code>","text":"<p>Input (English):</p> <p>Completion of one of the following computing majors: COMS-MAJ, CSEC-MAJ, DTSC-MAJ, HCCC-MAJ</p> <p>Expression:</p> <pre><code>SUBST(\"COMS-MAJ\", \"CSEC-MAJ\", \"DTSC-MAJ\", \"HCCC-MAJ\")\n</code></pre>"},{"location":"syntax/#grade-based-entry","title":"Grade-Based Entry","text":"<p>Input (English):</p> <p>Students who completed MATH1116 or MATH1113 with \u226560, or MATH1013/MATH1014 with \u226580.</p> <p>Expression:</p> <pre><code>MATH1116 &gt;= 60 | MATH1113 &gt;= 60 | MATH1013 &gt;= 80 | MATH1014 &gt;= 80\n</code></pre>"},{"location":"syntax/#year-dependent-path","title":"Year-Dependent Path","text":"<p>Input (English):</p> <p>ACT Specialist Maths double major students may take this in first year concurrently with MATH1115.</p> <p>Expression:</p> <pre><code>(~MATH1115 &amp; YEAR 1) | (MATH1116 &gt;= 60 | MATH1113 &gt;= 60 | MATH1013 &gt;= 80 | MATH1014 &gt;= 80)\n</code></pre>"},{"location":"syntax/#degree-specific-with-level-based-logic","title":"Degree-Specific with Level-Based Logic","text":"<p>Input (English):</p> <p>Enrolled in Bachelor of Laws (ALLB) and 5 LAWS 1000-level courses which may be concurrent, OR Juris Doctor and 5 LAWS 1000/6100-level courses which may be concurrent.</p> <p>Expression:</p> <pre><code>(DEG \"Bachelor of Laws (ALLB)\" &amp; 30 * &lt;['LAWS1_'] | [~'LAWS1_']&gt;)\n| (DEG \"Juris Doctor (MJD)\" &amp; 30 * &lt;['LAWS1_'] | [~'LAWS1_'] | ['LAWS61_'] | [~'LAWS61_']&gt;)\n</code></pre>"},{"location":"syntax/#concurrency-logic","title":"Concurrency Logic","text":"<p>Input (English):</p> <p>Must have completed or be concurrently enrolled in EMET8005 and ECON8013. Excludes COMP1140.</p> <p>Expression:</p> <pre><code>(EMET8005 | ~EMET8005) &amp; (ECON8013 | ~ECON8013)\n</code></pre>"},{"location":"syntax/#use-of-units-and-filter-together","title":"Use of <code>UNITS</code> and <code>FILTER</code> Together","text":"<p>Input (English):</p> <p>48 units, which must consist of at least 18 units of COMP3xxx courses, made up of:</p> <ul> <li>12 units from COMP3900 and COMP1720  </li> <li>at least 12 units from COMP3540 | COMP4350 | COMP4610 | COMP4528</li> <li>at most 12 units from COMP1710 | HUMN1001 | MUSI1110 | PHIL1008 </li> <li>at most 24 units from ARTH2181 | ARTV2059 | COMP2120 | COMP3670 | DESN2004 | DESN2008 | DESN2010 | HUMN2001 | MGMT2009 | MUSI3309 | SCOR3001 | SOCY2038 | SOCY2166</li> </ul> <p>Expression:</p> <pre><code>COMP1720 &amp; COMP3900 &amp; FILTER(12 * &lt;['COMP3_']&gt;) {\n    UNITS 36 {\n        MIN 12 * &lt;COMP3540 | COMP4350 | COMP4610 | COMP4528&gt;\n        MAX 12 * &lt;COMP1710 | HUMN1001 | MUSI1110 | PHIL1008&gt;\n        MAX 24 * &lt;ARTH2181 | ARTV2059 | COMP2120 | COMP3670 | DESN2004 | DESN2008 | DESN2010 | HUMN2001 | MGMT2009 | MUSI3309 | SCOR3001 | SOCY2038 | SOCY2166&gt;\n    }\n}\n</code></pre> <p>Explanatory Notes</p> <p><code>COMP3900</code> and <code>COMP1720</code> are required, and so get excluded from the <code>UNITS</code> block. Between them, they make up 12 units, so this 12 is removed from the 48 required, to give a <code>UNITS 36 { ... }</code>. We additionally lower the 18 units of COMP3xxx down to 12 units, because we are required to take <code>COMP3900</code>, which counts for 6 units.</p>"},{"location":"syntax/#ebnf","title":"EBNF","text":"<p>This is not guaranteed to be correct, but just a sketch that may be of use.</p> <pre><code>&lt;expression&gt;        ::= &lt;or-expr&gt; ;\n\n&lt;or-expr&gt;           ::= &lt;and-expr&gt;\n                      | &lt;or-expr&gt; \"|\" &lt;and-expr&gt; ;\n\n&lt;and-expr&gt;          ::= &lt;term&gt;\n                      | &lt;and-expr&gt; \"&amp;\" &lt;term&gt; ;\n\n&lt;term&gt;              ::= &lt;parenthesised&gt;\n                      | &lt;unit-expr&gt;\n                      | &lt;special-expr&gt;\n                      | &lt;course-term&gt;\n                      | &lt;group-expr&gt; ;\n\n&lt;parenthesised&gt;     ::= \"(\" &lt;expression&gt; \")\" ;\n\n&lt;course-term&gt;       ::= [ \"!\" ] [ \"~\" ] &lt;COURSE_CODE&gt;\n                      | [ \"!\" ] [ \"~\" ] \"[\" [ \"~\" ] &lt;STRING_LITERAL&gt; \"]\" ;\n\n&lt;group-expr&gt;        ::= \"&lt;\" [ \"1\" ] &lt;group-item&gt; { \"|\" &lt;group-item&gt; } \"&gt;\" [ \"&gt;=\" &lt;INTEGER&gt; ] ;\n\n&lt;group-item&gt;        ::= &lt;course-term&gt; ; \n\n&lt;unit-expr&gt;         ::= &lt;units-prefix&gt; &lt;course-or-group&gt;\n                      | &lt;courses-default-units&gt; ;\n\n&lt;units-prefix&gt;      ::= &lt;INTEGER&gt; \"*\" ; \n\n&lt;course-or-group&gt;   ::= &lt;course-term&gt; | &lt;group-expr&gt; ;\n\n&lt;courses-default-units&gt;\n                    ::= &lt;course-term&gt; ; \n\n&lt;units-block&gt;       ::= \"UNITS\" &lt;INTEGER&gt; \"{\" &lt;minmax-clause&gt;{ &lt;minmax-clause&gt; } \"}\" ;\n\n&lt;minmax-clause&gt;     ::= ( \"MIN\" | \"MAX\" ) &lt;INTEGER&gt; \"*\" &lt;group-expr&gt; ;\n\n&lt;filter-expr&gt;       ::= \"FILTER\" \"(\" &lt;expression&gt; \")\" \"{\" &lt;expression&gt; \"}\" ;\n\n&lt;weak-expr&gt;         ::= \"WEAK\" \"(\" &lt;expression&gt; \")\" ;\n\n&lt;then-after-expr&gt;   ::= ( \"THEN\" | \"AFTER\" ) &lt;COURSE_CODE&gt; [ \"YEAR\" &lt;INTEGER&gt; ] [ &lt;STRING_LITERAL&gt; ] \n\n&lt;grade-expr&gt;        ::= &lt;COURSE_CODE&gt; \"&gt;=\" &lt;INTEGER&gt; ;\n\n&lt;gpa-expr&gt;          ::= \"GPA\"  \"&gt;=\" &lt;INTEGER&gt; ;\n\n&lt;wam-expr&gt;          ::= \"WAM\"  \"&gt;=\" &lt;INTEGER&gt; ;\n\n&lt;year-expr&gt;         ::= \"YEAR\" &lt;INTEGER&gt; [ \"+\" ] ;\n\n&lt;degree-expr&gt;       ::= \"DEG\" &lt;STRING_LITERAL&gt; ;\n\n&lt;permission-expr&gt;   ::= \"PC\"  [ &lt;STRING_LITERAL&gt; ] ;\n\n&lt;subst-expr&gt;        ::= \"SUBST\" &lt;string-list&gt; ;\n\n&lt;select-expr&gt;       ::= \"SELECT\" &lt;STRING_LITERAL&gt; &lt;string-list&gt; ;  \n\n&lt;string-list&gt;       ::= &lt;STRING_LITERAL&gt; { \",\" &lt;STRING_LITERAL&gt; } ;\n\n&lt;constant&gt;          ::= \"TRUE\" | \"FALSE\" ;\n\n&lt;other-expr&gt;        ::= \"OTHER\" &lt;STRING_LITERAL&gt; ; \n\n&lt;special-expr&gt;      ::= &lt;units-block&gt;\n                      | &lt;filter-expr&gt;\n                      | &lt;weak-expr&gt;\n                      | &lt;then-after-expr&gt;\n                      | &lt;grade-expr&gt;\n                      | &lt;gpa-expr&gt;\n                      | &lt;wam-expr&gt;\n                      | &lt;year-expr&gt;\n                      | &lt;degree-expr&gt;\n                      | &lt;permission-expr&gt;\n                      | &lt;subst-expr&gt;\n                      | &lt;select-expr&gt;\n                      | &lt;constant&gt;\n                      | &lt;other-expr&gt; ;\n\n&lt;COURSE_CODE&gt;       ::= /[A-Z]{4}\\d{4}/ ;\n&lt;STRING_LITERAL&gt;    ::= '\"' ... '\"'     \n&lt;INTEGER&gt;           ::= /0|[1-9]\\d*/ ;\n</code></pre>"}]}